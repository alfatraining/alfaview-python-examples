# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from pb.authentication import authenticationService_pb2 as authentication_dot_authenticationService__pb2
from pb.common import accessInfo_pb2 as common_dot_accessInfo__pb2
from pb.common import replyInfo_pb2 as common_dot_replyInfo__pb2


class AuthenticationServiceStub(object):
    """*
    AuthenticationService is used to authenticate against our platform using different
    authentication methods, check whether you are still authenticated as well as
    update your authentication credentials upon user updates.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.authenticate = channel.unary_unary(
                '/authentication.AuthenticationService/authenticate',
                request_serializer=authentication_dot_authenticationService__pb2.AuthenticationRequest.SerializeToString,
                response_deserializer=authentication_dot_authenticationService__pb2.AuthenticationReply.FromString,
                )
        self.signAccessToken = channel.unary_unary(
                '/authentication.AuthenticationService/signAccessToken',
                request_serializer=authentication_dot_authenticationService__pb2.SignAccessTokenRequest.SerializeToString,
                response_deserializer=authentication_dot_authenticationService__pb2.AuthenticationReply.FromString,
                )
        self.isAuthenticated = channel.unary_unary(
                '/authentication.AuthenticationService/isAuthenticated',
                request_serializer=common_dot_accessInfo__pb2.AccessInfo.SerializeToString,
                response_deserializer=common_dot_replyInfo__pb2.ReplyInfo.FromString,
                )
        self.requestPasswordReset = channel.unary_unary(
                '/authentication.AuthenticationService/requestPasswordReset',
                request_serializer=authentication_dot_authenticationService__pb2.PasswordResetRequest.SerializeToString,
                response_deserializer=authentication_dot_authenticationService__pb2.PasswordResetReply.FromString,
                )
        self.listAuthentications = channel.unary_unary(
                '/authentication.AuthenticationService/listAuthentications',
                request_serializer=authentication_dot_authenticationService__pb2.ListAuthenticationsRequest.SerializeToString,
                response_deserializer=authentication_dot_authenticationService__pb2.ListAuthenticationsReply.FromString,
                )
        self.authenticationCreate = channel.unary_unary(
                '/authentication.AuthenticationService/authenticationCreate',
                request_serializer=authentication_dot_authenticationService__pb2.AuthenticationCreateRequest.SerializeToString,
                response_deserializer=authentication_dot_authenticationService__pb2.AuthenticationCreateReply.FromString,
                )
        self.authenticationUpdate = channel.unary_unary(
                '/authentication.AuthenticationService/authenticationUpdate',
                request_serializer=authentication_dot_authenticationService__pb2.AuthenticationUpdateRequest.SerializeToString,
                response_deserializer=common_dot_replyInfo__pb2.ReplyInfo.FromString,
                )
        self.authenticationInformation = channel.unary_unary(
                '/authentication.AuthenticationService/authenticationInformation',
                request_serializer=authentication_dot_authenticationService__pb2.AuthenticationInformationRequest.SerializeToString,
                response_deserializer=authentication_dot_authenticationService__pb2.AuthenticationInformationReply.FromString,
                )
        self.accessTokenInformation = channel.unary_unary(
                '/authentication.AuthenticationService/accessTokenInformation',
                request_serializer=authentication_dot_authenticationService__pb2.AccessTokenInformationRequest.SerializeToString,
                response_deserializer=authentication_dot_authenticationService__pb2.AuthenticationReply.FromString,
                )


class AuthenticationServiceServicer(object):
    """*
    AuthenticationService is used to authenticate against our platform using different
    authentication methods, check whether you are still authenticated as well as
    update your authentication credentials upon user updates.
    """

    def authenticate(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def signAccessToken(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isAuthenticated(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def requestPasswordReset(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listAuthentications(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def authenticationCreate(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def authenticationUpdate(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def authenticationInformation(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def accessTokenInformation(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthenticationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.authenticate,
                    request_deserializer=authentication_dot_authenticationService__pb2.AuthenticationRequest.FromString,
                    response_serializer=authentication_dot_authenticationService__pb2.AuthenticationReply.SerializeToString,
            ),
            'signAccessToken': grpc.unary_unary_rpc_method_handler(
                    servicer.signAccessToken,
                    request_deserializer=authentication_dot_authenticationService__pb2.SignAccessTokenRequest.FromString,
                    response_serializer=authentication_dot_authenticationService__pb2.AuthenticationReply.SerializeToString,
            ),
            'isAuthenticated': grpc.unary_unary_rpc_method_handler(
                    servicer.isAuthenticated,
                    request_deserializer=common_dot_accessInfo__pb2.AccessInfo.FromString,
                    response_serializer=common_dot_replyInfo__pb2.ReplyInfo.SerializeToString,
            ),
            'requestPasswordReset': grpc.unary_unary_rpc_method_handler(
                    servicer.requestPasswordReset,
                    request_deserializer=authentication_dot_authenticationService__pb2.PasswordResetRequest.FromString,
                    response_serializer=authentication_dot_authenticationService__pb2.PasswordResetReply.SerializeToString,
            ),
            'listAuthentications': grpc.unary_unary_rpc_method_handler(
                    servicer.listAuthentications,
                    request_deserializer=authentication_dot_authenticationService__pb2.ListAuthenticationsRequest.FromString,
                    response_serializer=authentication_dot_authenticationService__pb2.ListAuthenticationsReply.SerializeToString,
            ),
            'authenticationCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.authenticationCreate,
                    request_deserializer=authentication_dot_authenticationService__pb2.AuthenticationCreateRequest.FromString,
                    response_serializer=authentication_dot_authenticationService__pb2.AuthenticationCreateReply.SerializeToString,
            ),
            'authenticationUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.authenticationUpdate,
                    request_deserializer=authentication_dot_authenticationService__pb2.AuthenticationUpdateRequest.FromString,
                    response_serializer=common_dot_replyInfo__pb2.ReplyInfo.SerializeToString,
            ),
            'authenticationInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.authenticationInformation,
                    request_deserializer=authentication_dot_authenticationService__pb2.AuthenticationInformationRequest.FromString,
                    response_serializer=authentication_dot_authenticationService__pb2.AuthenticationInformationReply.SerializeToString,
            ),
            'accessTokenInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.accessTokenInformation,
                    request_deserializer=authentication_dot_authenticationService__pb2.AccessTokenInformationRequest.FromString,
                    response_serializer=authentication_dot_authenticationService__pb2.AuthenticationReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'authentication.AuthenticationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthenticationService(object):
    """*
    AuthenticationService is used to authenticate against our platform using different
    authentication methods, check whether you are still authenticated as well as
    update your authentication credentials upon user updates.
    """

    @staticmethod
    def authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/authentication.AuthenticationService/authenticate',
            authentication_dot_authenticationService__pb2.AuthenticationRequest.SerializeToString,
            authentication_dot_authenticationService__pb2.AuthenticationReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def signAccessToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/authentication.AuthenticationService/signAccessToken',
            authentication_dot_authenticationService__pb2.SignAccessTokenRequest.SerializeToString,
            authentication_dot_authenticationService__pb2.AuthenticationReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def isAuthenticated(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/authentication.AuthenticationService/isAuthenticated',
            common_dot_accessInfo__pb2.AccessInfo.SerializeToString,
            common_dot_replyInfo__pb2.ReplyInfo.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def requestPasswordReset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/authentication.AuthenticationService/requestPasswordReset',
            authentication_dot_authenticationService__pb2.PasswordResetRequest.SerializeToString,
            authentication_dot_authenticationService__pb2.PasswordResetReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listAuthentications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/authentication.AuthenticationService/listAuthentications',
            authentication_dot_authenticationService__pb2.ListAuthenticationsRequest.SerializeToString,
            authentication_dot_authenticationService__pb2.ListAuthenticationsReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def authenticationCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/authentication.AuthenticationService/authenticationCreate',
            authentication_dot_authenticationService__pb2.AuthenticationCreateRequest.SerializeToString,
            authentication_dot_authenticationService__pb2.AuthenticationCreateReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def authenticationUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/authentication.AuthenticationService/authenticationUpdate',
            authentication_dot_authenticationService__pb2.AuthenticationUpdateRequest.SerializeToString,
            common_dot_replyInfo__pb2.ReplyInfo.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def authenticationInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/authentication.AuthenticationService/authenticationInformation',
            authentication_dot_authenticationService__pb2.AuthenticationInformationRequest.SerializeToString,
            authentication_dot_authenticationService__pb2.AuthenticationInformationReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def accessTokenInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/authentication.AuthenticationService/accessTokenInformation',
            authentication_dot_authenticationService__pb2.AccessTokenInformationRequest.SerializeToString,
            authentication_dot_authenticationService__pb2.AuthenticationReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
